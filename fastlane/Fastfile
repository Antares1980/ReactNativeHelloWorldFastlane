fastlane_version '2.118.1'

before_all do
#  ensure_git_branch
#  ensure_git_status_clean
#  git_pull
end

platform :ios do
   # iOS Lanes
   # lane :bundle_installation do
   #   bundle_install(
   #    path: ENV["HOME"] + "/.bundle/dependencies"
   #   )
   # Cannot be done via bundle exec. It is needed to do it before running
   end
   lane :sync_certificates do
     sync_code_signing(
       git_url: ENV["CERTIFICATES_GIT_URL"],
       username: ENV["FASTLANE_XCODE_APPLE_ACCOUNT"],
       app_identifier: ENV["FASTLANE_XCODE_APP_IDENTIFIER"],
       keychain_password: ENV["FASTLANE_PASSWORD"],
       readonly: true
     )
   end
   lane :build do
     increment_build_number(
        xcodeproj: ENV["FASTLANE_XCODE_PROJECT_NAME"] # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)
      )
     gym
   end
   lane :tests do
     run_tests(
      scheme: ENV["FASTLANE_XCODE_SCHEME"],
      project: ENV["FASTLANE_XCODE_PROJECT_NAME"]
      )
   end
   lane :run_coverage do
     scan
     slather(cobertura_xml: true, jenkins: true, scheme: "HelloWorld", build_directory: "./DerivedData", output_directory: "./reports", proj: "./HelloWorld.xcodeproj")
     lizard(source_folder: "HelloWorld", language: "swift", export_type: "xml", report_file: "./reports/lizard-report.xml")
     swiftlint(output_file: "./reports/swiftlint.txt", ignore_exit_status: true)
   end
   lane :distribute do
     appcenter_upload(
       api_token: ENV["FASTLANE_APP_CENTER_TOKEN"],
       owner_name: ENV["FASTLANE_XCODE_DISTRIBUTION_APP_CENTER_OWNER_NAME"],
       app_name: ENV["FASTLANE_XCODE_APP_NAME"],
       ipa: ENV["FASTLANE_XCODE_DISTRIBUTION_IPA_PATH"],
       group: ENV["FASTLANE_XCODE_DISTRIBUTION_APP_CENTER_GROUP"]
    )
  end
end
